# matsusada_au20p7.db
#
# Params Required:
# UNITNUM: Unique number to identify power supply index in chain
# PORT: asyn device port
#
# This file provides EPICS PV definitions for a Matsusada AU-20P7 power supply connected
# to a Matsusada CO series power supply controller
# 
# Teminology:
# - "Set" means to change the setpoint
# - "Get" means to obtain the setpoint
# - "Read" means to measure the output
#
# Author(s): Ryan Yang (ryang2@mit.edu)
#
# Changlog:
# 2021/05/23 - Documentation
# 2021/02/22 - Added conversion of units (Raw <-> V/mA)
# 2021/02/08 - Added file


record(ao, "AU-20P7-$(UNITNUM):voltage:set") {
    field(DESC, "Set voltage of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(OUT, "@matsusada_co_ctrl.proto set_voltage($(UNITNUM)) $(PORT)")
    field(DRVL, "0")
    field(DRVH, "20000")
    field(EGU,  "V")
    field(LINR, "SLOPE")
    field(ASLO, "2")
    field(ESLO, "0.30518043793392846") # 20000/0xFFFF
    field(EOFF, "0")
}

#record(ao, "AU-20P7-$(UNITNUM):voltage:set:AOFF") {
#    field(DTYP,"Soft Channel")
#    field(VAL,"0")
#    field(OUT,"AU-20P7-$(UNITNUM):voltage:set.AOFF PP")
#    field(PINI,"YES")
#}

record(ai, "AU-20P7-$(UNITNUM):voltage:get") {
    field(DESC, "Get voltage of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(INP, "@matsusada_co_ctrl.proto get_voltage($(UNITNUM)) $(PORT)")
    field(SCAN, ".1 second")
    field(EGU,  "V")
    field(LINR, "SLOPE")
    field(ASLO, "2")
    field(ESLO, "0.30518043793392846") # 20000/0xFFFF
    field(EOFF, "0")
}

#record(dfanout, "AU-20P7-$(UNITNUM):voltage:clbr:ASLO") {
#    field(DOL, "1")
#    field(OMSL, "supervisory")
#    field(SELM, "All")
#}

record(ai, "AU-20P7-$(UNITNUM):voltage:read") {
    field(DESC, "Read voltage of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(INP, "@matsusada_co_ctrl.proto read_voltage($(UNITNUM)) $(PORT)")
    field(SCAN, ".1 second")
    field(EGU,  "V")
    field(LINR, "SLOPE")
    #field(ASLO, "2")
    field(ESLO, "4.884004884004884") # 20000/0xFFF
    field(EOFF, "0")
}

record(ao, "AU-20P7-$(UNITNUM):current:set") {
    field(DESC, "Set current of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(OUT, "@matsusada_co_ctrl.proto set_current($(UNITNUM)) $(PORT)")
    field(DRVL, "0")
    field(DRVH, "7.5")
    field(EGU, "mA")
    field(LINR, "SLOPE")
    field(ESLO, "0.00011444266422522316") # 7.5/0xFFFF
    field(EOFF, "0")
}

record(ai, "AU-20P7-$(UNITNUM):current:get") {
    field(DESC, "Get current of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(INP, "@matsusada_co_ctrl.proto get_current($(UNITNUM)) $(PORT)")
    field(SCAN, ".1 second")
    field(EGU, "mA")
    field(LINR, "SLOPE")
    field(ESLO, "0.00011444266422522316") # 7.5/0xFFFF
    field(EOFF, "0")
}

record(ai, "AU-20P7-$(UNITNUM):current:read") {
    field(DESC, "Read current of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(INP, "@matsusada_co_ctrl.proto read_current($(UNITNUM)) $(PORT)")
    field(SCAN, ".1 second")
    field(EGU, "mA")
    field(LINR, "SLOPE")
    field(ESLO, "0.0018315018315018315") # 7.5/0xFFF
    field(EOFF, "0")
}

#record(bo, "AU-20P7-$(UNITNUM):polarity:set") {
#    field(DESC, "Set polarity of $(PORT):$(UNITNUM)")
#    field(DTYP, "stream")
#    field(OUT, "@matsusada_co_ctrl.proto set_polarity($(UNITNUM)) $(PORT)")
#    field(ZNAM, "Positive")
#    field(ONAM, "Negative")
#}

#record(bi, "AU-20P7-$(UNITNUM):polarity:get") {
#    field(DESC, "Get polarity of $(PORT):$(UNITNUM)")
#    field(DTYP, "stream")
#    field(INP, "@matsusada_co_ctrl.proto get_polarity($(UNITNUM)) $(PORT)")
#    field(SCAN, ".5 second")
#    field(ZNAM, "Positive")
#    field(ONAM, "Negative")
#}

#record(bi, "AU-20P7-$(UNITNUM):polarity:read") {
#    field(DESC, "Read polarity of $(PORT):$(UNITNUM)")
#    field(DTYP, "stream")
#    field(INP, "@matsusada_co_ctrl.proto read_polarity($(UNITNUM)) $(PORT)")
#    field(SCAN, ".5 second")
#    field(ZNAM, "Positive")
#    field(ONAM, "Negative")
#}

record(bo, "AU-20P7-$(UNITNUM):status:set") {
    field(DESC, "Set status of $(PORT)$(UNITNUM)")
    field(DTYP, "stream")
    field(OUT, "@matsusada_co_ctrl.proto set_status($(UNITNUM)) $(PORT)")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

record(bi, "AU-20P7-$(UNITNUM):status:read") {
    field(DESC, "Read status of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(INP, "@matsusada_co_ctrl.proto read_status($(UNITNUM)) $(PORT)")
    field(SCAN, ".1 second")
    field(ZNAM, "OFF")
    field(ONAM, "ON")
}

#record(calcout, "AU-20P7-$(UNITNUM):rstcheck") {
#    field(INPA, "AU-20P7-$(UNITNUM):status:read.VAL NPP")
#    field(CALC, "A")
#    field(SCAN, ".1 second")
#    field(OOPT, "Transition To Zero")
#    field(OUT, "AU-20P7-$(UNITNUM):reset PP")
#}

record(bo, "AU-20P7-$(UNITNUM):reset") {
    field(DESC, "Reset cutoff of $(PORT):$(UNITNUM)")
    field(DTYP, "stream")
    field(OUT, "@matsusada_co_ctrl.proto reset($(UNITNUM)) $(PORT)")
}

record(calc, "AU-20P7-$(UNITNUM):power:read") {
  field(DESC, "Read power of $(PORT):$(UNITNUM)")
   field(INPA, "AU-20P7-$(UNITNUM):voltage:read.VAL NPP")
   field(INPB, "AU-20P7-$(UNITNUM):current:read.VAL NPP")
   field(CALC, "A * B / 1000")
   field(SCAN, ".1 second")
   field(PREC, "3")
   field(EGU, "W")
}

